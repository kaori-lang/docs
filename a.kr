/* test primitive vars. & operations */

def test_numbers() -> bool {
    $a: number = 10.0;
    $b: number = -2.0;

    // test arithmetic
    $sum_a_b: number = a + b;
    $diff_a_b: number = a - b;
    $prod_a_b: number = a * b;
    $quot_a_b: number = a / b;

    if sum_a_b != 8.0 {
        return false;
    }

    if diff_a_b != 12.0 {
        return false;
    }

    if prod_a_b != -20.0 {
        return false;
    }

    if quot_a_b != -5.0 {
        return false;
    }

    return true;
}



def test_newton() -> bool {
    /* approximate magnitude of the 2-D vector of <x, y> using Newton's Method */
    $x: number = 8.0;
    $y: number = 4.0;

    $dist_squ: number = x * x + y * y;
    $guess: number = 7.25;

    for $iter: number = 0; iter < 4; iter += 1 {
        guess = 0.5 * ( guess + dist_squ / guess );
    }

    /* max allowed error in magnitude approximation */
    $max_elipson: number = 0.01;

    /* expected answer: D_target = sqrt(80) */
    $target_answer: number = 8.944;

    print(guess);
    print(target_answer);

    return (target_answer - guess) < max_elipson;
}

def main() {
    /* test arithmetic: 1 is an error */
    if !test_numbers() {
        print(1);
    }

    /* test complex arithmetic: 1 is an error */
    if !test_newton() {
        print(1);
    }

    $n: number = foo(1, 2);

  
}

def foo(a: number, b: number) -> number {
    $num: number = 7;
    $n = 5;

    print(1 + 3.5);
    return 1;
}

def fib(n: number) -> number {
    if n < 2 {
        return n;
    } else {
        return fib(n - 1) + fib(n - 2);
    }   

    return 0;
}

def iterative() {
    $iterations = 1000000;
    $max_fib = 40;

    for $i = 0; i < iterations; i += 1 {
        $a = 0;
        $b = 1;

        for $j = 0; j < max_fib; j += 1 {
            $temp = a + b;
            a = b;
            b = temp;
        }
    }
}
